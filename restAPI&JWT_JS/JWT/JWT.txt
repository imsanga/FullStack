JWT stands for JSON Web Token, which is a compact, URL-safe means of representing claims to be transferred between two parties. JWTs are often used for authentication and authorization in web development.

1. Creation of JWT (Server Side):
The server creates a JSON object containing some claims (statements about an entity, typically a user).
The JSON object is then encoded using a secret key to create a JWT.
/*
Header: {
  "alg": "HS256",
  "typ": "JWT"
}
Payload: {
  "sub": "1234567890",
  "name": "John Doe",
  "iat": 1516239022
}
Signature: HMACSHA256(
  base64UrlEncode(Header) + "." +
  base64UrlEncode(Payload),
  secret
)
*/

2. Sending JWT to the Client: The server sends the JWT to the client.

3. Client-Side Usage:
The client stores the JWT (usually in a cookie or local storage).
The client includes the JWT in the header of subsequent requests to the server.
/* 
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
*/

4. Server-Side Verification:
-> When the server receives a request with a JWT, it verifies the signature using the secret key.
-> If the signature is valid, it decodes the claims in the payload and uses them for authentication or authorization.

JWTs are commonly used in token-based authentication systems, where the server issues a token upon successful login, and the client presents this token for subsequent requests. In a real-world scenario, you'd want to handle JWTs securely, including proper key management and token validation
/*
const jwt = require('jsonwebtoken');

// Creating a JWT
const token = jwt.sign({ userId: '123', username: 'john_doe' }, 'secretKey');

// Verifying a JWT
try {
  const decoded = jwt.verify(token, 'secretKey');
  console.log(decoded); // { userId: '123', username: 'john_doe', iat: 1234567890 }
} catch (error) {
  console.error('Invalid token');
}
*/

-> To get the secret token we can use
/*
require("crypto").randomBytes(64).toString("hex")
'f5066555c7dce6f43b73118dd7cd166f2a97725eb5d6dcd4e0dc651b143cdf9ce72d4047aa508098e919237e2259d17368a1c099a18970a78d4d72b327cf4d7c'
*/

